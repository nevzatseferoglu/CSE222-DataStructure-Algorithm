--------Hashtable-with-Chaining-Technique-Start----------
============================================================

put(1 , "A");
put(1 , "B");
put(1 , "A");
put(1 , "C");
Size : 1
Current hashtable : 
{1=C}

put(2 , "A");
put(2 , "B");
put(2 , "A");
put(2 , "C");
Size : 2
Current hashtable : 
{1=C, 2=C}

put(3 , "A");
put(3 , "B");
put(3 , "A");
put(3 , "C");
Size : 3
Current hashtable : 
{1=C, 2=C, 3=C}

-> get(1) = C
-> get(2) = C
-> get(3) = C
isEmpty() = false

remove(1)
Size : 2
Current hashtable : 
{, 2=C3=C}

remove(2)
Size : 1
Current hashtable : 
{3=C}

remove(3)
Size : 0
Current hashtable : 
{}

-> get(randomKey) = 1671575112

-------------------------
10K size analyzing...
Creating runtime =  56672000 ns 
get( ) runTime =  488000 ns 
remove( ) runTime =  368000 ns 
put( ) runTime =  16000 ns 

-> get(randomKey) = -749392258

-------------------------
50K size analyzing...
Creating runtime =  152715000 ns 
get( ) runTime =  748000 ns 
remove( ) runTime =  54000 ns 
put( ) runTime =  38702 ns 

-> get(randomKey) = 1124844911

-------------------------
100K size analyzing...
Creating runtime =  183173000 ns 
get( ) runTime =  1038000 ns 
remove( ) runTime =  226000 ns 
put( ) runTime =  137000 ns 


--------Hashtable-with-Chaining-Technique-End----------
=======================================================
