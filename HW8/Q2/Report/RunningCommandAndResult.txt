import edu.gtu.*;
import java.util.Arrays;
import java.util.Iterator;

public class Main {


    public static void main( String[] argv ) {

        try {

            System.out.println("*********GtuGraph-Test-Start*********");
            System.out.println("-------------------------------------");

            System.out.println();
            System.out.println("The test of graph which is defined in assignment.");

            System.out.println();
            GtuGraph assignmentGraph = new GtuGraph(5 , true);
            assignmentGraph.insert( new Edge(0 , 1) );
            assignmentGraph.insert( new Edge(1 , 0) );
            assignmentGraph.insert( new Edge(1 , 4) );
            assignmentGraph.insert( new Edge(3 , 0) );
            assignmentGraph.insert( new Edge(4 , 0) );
            assignmentGraph.insert( new Edge(4 , 3) );
            assignmentGraph.insert( new Edge(4 , 2) );

            System.out.println("A is encoded as 0 ");
            System.out.println("B is encoded as 1 ");
            System.out.println("C is encoded as 2 ");
            System.out.println("D is encoded as 3 ");
            System.out.println("E is encoded as 4 ");
            System.out.println();

            System.out.println("List which A is used as source : ");
            System.out.println(assignmentGraph.rowListOfVertexAsString(0));
            System.out.println();

            System.out.println("List which B is used as source : ");
            System.out.println(assignmentGraph.rowListOfVertexAsString(1));
            System.out.println();

            System.out.println("List which C is used as source : ");
            System.out.println(assignmentGraph.rowListOfVertexAsString(2));
            System.out.println();

            System.out.println("List which D is used as source : ");
            System.out.println(assignmentGraph.rowListOfVertexAsString(3));
            System.out.println();

            System.out.println("List which E is used as source : ");
            System.out.println(assignmentGraph.rowListOfVertexAsString(4));
            System.out.println();

            System.out.println("List which A is used as destination : ");
            System.out.println(assignmentGraph.columnListOfVertexAsString(0));
            System.out.println();

            System.out.println("List which B is used as destination : ");
            System.out.println(assignmentGraph.columnListOfVertexAsString(1));
            System.out.println();

            System.out.println("List which C is used as destination : ");
            System.out.println(assignmentGraph.columnListOfVertexAsString(2));
            System.out.println();

            System.out.println("List which D is used as destination : ");
            System.out.println(assignmentGraph.columnListOfVertexAsString(3));
            System.out.println();

            System.out.println("List which E is used as destination : ");
            System.out.println(assignmentGraph.columnListOfVertexAsString(4));
            System.out.println();


            System.out.println("isEdge( 0 , 1 ) = " + assignmentGraph.isEdge( 0 , 1));
            System.out.println("isEdge( 1 , 0 ) = " + assignmentGraph.isEdge( 1 , 0));
            System.out.println("isEdge( 4 , 3 ) = " + assignmentGraph.isEdge( 4 , 3));
            System.out.println("isEdge( 3 , 4 ) = " + assignmentGraph.isEdge( 3 , 4));
            System.out.println();


            System.out.println("getEdge( 0 , 1 ) = " + assignmentGraph.getEdge( 0 , 1));
            System.out.println("getEdge( 1 , 0 ) = " + assignmentGraph.getEdge( 1 , 0));
            System.out.println("getEdge( 4 , 3 ) = " + assignmentGraph.getEdge( 4 , 3));
            System.out.println("getEdge( 3 , 4 ) = " + assignmentGraph.getEdge( 3 , 4));
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println();


            System.out.println("Iterator-Test");
            System.out.println("-------------");
            System.out.println();

            System.out.println("Vertex A (source) iterator going over A's edges. ");
            Iterator<Edge> iterVertexA = assignmentGraph.edgeIterator(0);
            while ( iterVertexA.hasNext() ) {
                System.out.println( iterVertexA.next() );
            }

            System.out.println();

            System.out.println("Vertex B (source) iterator going over A's edges. ");
            Iterator<Edge> iterVertexB = assignmentGraph.edgeIterator(1);
            while ( iterVertexB.hasNext() ) {
                System.out.println( iterVertexB.next() );
            }

            System.out.println();

            System.out.println("Vertex C (source) iterator going over C's edges. ");
            Iterator<Edge> iterVertexC = assignmentGraph.edgeIterator(2);
            while ( iterVertexC.hasNext() ) {
                System.out.println( iterVertexC.next() );
            }

            System.out.println();

            System.out.println("Vertex D (source) iterator going over C's edges. ");
            Iterator<Edge> iterVertexD = assignmentGraph.edgeIterator(3);
            while ( iterVertexD.hasNext() ) {
                System.out.println( iterVertexD.next() );
            }

            System.out.println();

            System.out.println("Vertex E (source) iterator going over E's edges. ");
            Iterator<Edge> iterVertexE = assignmentGraph.edgeIterator(4);
            while ( iterVertexE.hasNext() ) {
                System.out.println( iterVertexE.next() );
            }

            System.out.println();

            System.out.println("rowListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 0 ));
            System.out.println("deleteVertex( new Edge(0,1) ) = " + assignmentGraph.deleteEdge( new Edge( 0 , 1) ));
            System.out.println("rowListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(4) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 4 ));
            System.out.println("deleteVertex( new Edge(4,2) ) = " + assignmentGraph.deleteEdge( new Edge( 4 , 2) ));
            System.out.println("rowListOfVertexAsString(4) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 4 ));
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("deleteVertex(0) = " + assignmentGraph.deleteVertex( 0 ));
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("rowListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("deleteVertex(1) = " + assignmentGraph.deleteVertex( 1 ));
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("rowListOfVertexAsString(1) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 1 ));
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("deleteVertex(2) = " + assignmentGraph.deleteVertex( 2 ));
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("rowListOfVertexAsString(2) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 2 ));
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("insertVertex() = " + assignmentGraph.insertVertex() + " can be used as new vertex.");
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("insertVertex() = " + assignmentGraph.insertVertex() + " can be used as new vertex.");
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println();

            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println("insertVertex() = " + assignmentGraph.insertVertex() + " can be used as new vertex.");
            System.out.println("Number of vertex : " + assignmentGraph.getNumV() + ".");
            System.out.println();


            System.out.println("insert( 0 , 1 )");
            assignmentGraph.insert( new Edge( 0 , 1 ));
            System.out.println("insert( 0 , 2 )");
            assignmentGraph.insert( new Edge( 0 , 2 ));
            System.out.println("insert( 0 , 3 )");
            assignmentGraph.insert( new Edge( 0 , 3 ));

            System.out.println();

            System.out.println("insert( 2 , 0 )");
            assignmentGraph.insert( new Edge( 2 , 0 ));
            System.out.println("insert( 2 , 1 )");
            assignmentGraph.insert( new Edge( 2 , 1 ));
            System.out.println("insert( 2 , 3 )");
            assignmentGraph.insert( new Edge( 2 , 3 ));

            System.out.println();

            System.out.println("insert( 3 , 0 )");
            assignmentGraph.insert( new Edge( 3 , 0 ));
            System.out.println("insert( 3 , 1 )");
            assignmentGraph.insert( new Edge( 3 , 1 ));
            System.out.println("insert( 3 , 2 )");
            assignmentGraph.insert( new Edge( 3 , 2 ));

            System.out.println();

            System.out.println("rowListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(1) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 1 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(2) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 2 ));
            System.out.println();

            System.out.println();

            System.out.println("columnListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("columnListOfVertexAsString(1) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 1 ));
            System.out.println();

            System.out.println("columnListOfVertexAsString(2) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 2 ));
            System.out.println();


            System.out.println("BreadthFirstSearch-Test (Tree Result)");
            int[] parent1 = BreadthFirstSearch.breadthFirstSearch( assignmentGraph , 0 );

            for( int i = 0 ; i < parent1.length ; ++i ) {
                if( parent1[i] != -1 ) {
                    System.out.println( parent1[i] + " is parent of " + i );
                }
            }
            System.out.println("\n");

            System.out.println("DepthFirstSearch-Test (Tree Result)");
            DepthFirstSearch dfs = new DepthFirstSearch( assignmentGraph );
            int[] parent2 = dfs.getParent();

            for( int i = 0 ; i < parent2.length ; ++i ) {
                if( parent2[i] != -1 ) {
                    System.out.println( parent2[i] + " is parent of " + i );
                }
            }
            System.out.println("\n");

            System.out.println("-----------------------------------------------------");
            System.out.println();


            System.out.println("**********Undirected-Graph-Test-Start********");
            System.out.println("---------------------------------------------");

            
            GtuGraph undirectedGraph = new GtuGraph( 10  , false );

            undirectedGraph.insert( new Edge(0 , 1 ));
            undirectedGraph.insert( new Edge(0 , 2 ));
            undirectedGraph.insert( new Edge(2 , 3 ));
            undirectedGraph.insert( new Edge(2 , 1 ));
            undirectedGraph.insert( new Edge(3 , 1 ));

            System.out.println("rowListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(1) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 1 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(2) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 2 ));
            System.out.println();

            System.out.println("rowListOfVertexAsString(3) : ");
            System.out.println( assignmentGraph.rowListOfVertexAsString( 3 ));
            System.out.println();

            System.out.println();

            System.out.println("columnListOfVertexAsString(0) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 0 ));
            System.out.println();

            System.out.println("columnListOfVertexAsString(1) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 1 ));
            System.out.println();

            System.out.println("columnListOfVertexAsString(2) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 2 ));
            System.out.println();

            System.out.println("columnListOfVertexAsString(3) : ");
            System.out.println( assignmentGraph.columnListOfVertexAsString( 3 ));
            System.out.println();


            System.out.println("BreadthFirstSearch-Test (Tree Result)");
            int[] parent3 = BreadthFirstSearch.breadthFirstSearch( assignmentGraph , 0 );

            for( int i = 0 ; i < parent3.length ; ++i ) {
                if( parent3[i] != -1 ) {
                    System.out.println( parent3[i] + " is parent of " + i );
                }
            }
            System.out.println("\n");

            System.out.println("DepthFirstSearch-Test (Tree Result)");
            DepthFirstSearch dfs1 = new DepthFirstSearch( assignmentGraph );
            int[] parent4 = dfs1.getParent();

            for( int i = 0 ; i < parent4.length ; ++i ) {
                if( parent4[i] != -1 ) {
                    System.out.println( parent4[i] + " is parent of " + i );
                }
            }
            System.out.println("\n");


            System.out.println("---------------------------------------------");
            System.out.println("**********Undirected-Graph-Test-End**********");
            System.out.println();

            System.out.println("-------------------------------------");
            System.out.println("**********GtuGraph-Test-End**********");

        }
        catch ( Exception ex ) {
            System.out.println( ex.getMessage() );
        }
    }
}
